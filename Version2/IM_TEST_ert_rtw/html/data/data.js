var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"MAIN/IM_TEST","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"F:\\THE_LIBRARY\\CODE_BASE\\ROBOSERVO\\Sleipnier_IMU\\MAIN\\Prototype_04_407_VE_2_0_24318\\Chassis-positioning\\Version2\\IM_TEST_ert_rtw","tag":"","groupDisplay":"主文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'IM_TEST'.\r\n *\r\n * Model version                  : 1.31\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Sun Mar 31 18:34:26 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"IM_TEST.h\"                   /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(rtM, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  IM_TEST_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  IM_TEST_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 1.0E-5 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(rtM) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"IM_TEST.c","type":"source","group":"model","path":"F:\\THE_LIBRARY\\CODE_BASE\\ROBOSERVO\\Sleipnier_IMU\\MAIN\\Prototype_04_407_VE_2_0_24318\\Chassis-positioning\\Version2\\IM_TEST_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: IM_TEST.c\r\n *\r\n * Code generated for Simulink model 'IM_TEST'.\r\n *\r\n * Model version                  : 1.31\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Sun Mar 31 18:34:26 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"IM_TEST.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"mw_cmsis.h\"\r\n#include <math.h>\r\n#include <stddef.h>\r\n#define NumBitsPerChar                 8U\r\n\r\n/* Exported block signals */\r\nreal_T yraw;                           /* '<S1>/Add1' */\r\nreal_T xraw;                           /* '<S1>/Add2' */\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\nextern real_T rt_roundd_snf(real_T u);\r\nstatic void ForEachSubsystem(int32_T NumIters, const real_T *rtu_In1, const\r\n  real_T *rtu_In2, real_T *rty_Out1, DW_ForEachSubsystem localDW[1]);\r\n\r\n#define NOT_USING_NONFINITE_LITERALS   1\r\n\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nstatic void rt_InitInfAndNaN(size_t realSize);\r\nstatic boolean_T rtIsInf(real_T value);\r\nstatic boolean_T rtIsInfF(real32_T value);\r\nstatic boolean_T rtIsNaN(real_T value);\r\nstatic boolean_T rtIsNaNF(real32_T value);\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordH;\r\n    uint32_T wordL;\r\n  } words;\r\n} BigEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordL;\r\n    uint32_T wordH;\r\n  } words;\r\n} LittleEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  union {\r\n    real32_T wordLreal;\r\n    uint32_T wordLuint;\r\n  } wordL;\r\n} IEEESingle;\r\n\r\nreal_T rtInf;\r\nreal_T rtMinusInf;\r\nreal_T rtNaN;\r\nreal32_T rtInfF;\r\nreal32_T rtMinusInfF;\r\nreal32_T rtNaNF;\r\nstatic real_T rtGetInf(void);\r\nstatic real32_T rtGetInfF(void);\r\nstatic real_T rtGetMinusInf(void);\r\nstatic real32_T rtGetMinusInfF(void);\r\nstatic real_T rtGetNaN(void);\r\nstatic real32_T rtGetNaNF(void);\r\n\r\n/*\r\n * Initialize the rtInf, rtMinusInf, and rtNaN needed by the\r\n * generated code. NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic void rt_InitInfAndNaN(size_t realSize)\r\n{\r\n  (void) (realSize);\r\n  rtNaN = rtGetNaN();\r\n  rtNaNF = rtGetNaNF();\r\n  rtInf = rtGetInf();\r\n  rtInfF = rtGetInfF();\r\n  rtMinusInf = rtGetMinusInf();\r\n  rtMinusInfF = rtGetMinusInfF();\r\n}\r\n\r\n/* Test if value is infinite */\r\nstatic boolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nstatic boolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\r\n}\r\n\r\n/* Test if value is not a number */\r\nstatic boolean_T rtIsNaN(real_T value)\r\n{\r\n  boolean_T result = (boolean_T) 0;\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  if (bitsPerReal == 32U) {\r\n    result = rtIsNaNF((real32_T)value);\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.fltVal = value;\r\n    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&\r\n                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\r\n                          (tmpVal.bitVal.words.wordL != 0) ));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nstatic boolean_T rtIsNaNF(real32_T value)\r\n{\r\n  IEEESingle tmp;\r\n  tmp.wordL.wordLreal = value;\r\n  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\r\n                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\r\n}\r\n\r\n/*\r\n * Initialize rtInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T inf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    inf = rtGetInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    inf = tmpVal.fltVal;\r\n  }\r\n\r\n  return inf;\r\n}\r\n\r\n/*\r\n * Initialize rtInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetInfF(void)\r\n{\r\n  IEEESingle infF;\r\n  infF.wordL.wordLuint = 0x7F800000U;\r\n  return infF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetMinusInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T minf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    minf = rtGetMinusInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    minf = tmpVal.fltVal;\r\n  }\r\n\r\n  return minf;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetMinusInfF(void)\r\n{\r\n  IEEESingle minfF;\r\n  minfF.wordL.wordLuint = 0xFF800000U;\r\n  return minfF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize rtNaN needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetNaN(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T nan = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    nan = rtGetNaNF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF80000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    nan = tmpVal.fltVal;\r\n  }\r\n\r\n  return nan;\r\n}\r\n\r\n/*\r\n * Initialize rtNaNF needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetNaNF(void)\r\n{\r\n  IEEESingle nanF = { { 0.0F } };\r\n\r\n  nanF.wordL.wordLuint = 0xFFC00000U;\r\n  return nanF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Output and update for iterator system:\r\n *    '<S6>/For Each Subsystem'\r\n *    '<S8>/For Each Subsystem'\r\n */\r\nstatic void ForEachSubsystem(int32_T NumIters, const real_T *rtu_In1, const\r\n  real_T *rtu_In2, real_T *rty_Out1, DW_ForEachSubsystem localDW[1])\r\n{\r\n  /* local scratch DWork variables */\r\n  int32_T ForEach_itr;\r\n  int_T idxDelay;\r\n\r\n  /* Outputs for Iterator SubSystem: '<S6>/For Each Subsystem' incorporates:\r\n   *  ForEach: '<S7>/For Each'\r\n   */\r\n  for (ForEach_itr = 0; ForEach_itr < NumIters; ForEach_itr++) {\r\n    /* Delay: '<S7>/Variable Integer Delay' */\r\n    if ((rtu_In2[ForEach_itr] < 1.0) || rtIsNaN(rtu_In2[ForEach_itr])) {\r\n      /* ForEachSliceAssignment generated from: '<S7>/Out1' */\r\n      rty_Out1[ForEach_itr] = rtu_In1[ForEach_itr];\r\n    } else {\r\n      uint32_T tmp;\r\n      if (rtu_In2[ForEach_itr] > 4096.0) {\r\n        tmp = 4096U;\r\n      } else {\r\n        tmp = (uint32_T)rtu_In2[ForEach_itr];\r\n      }\r\n\r\n      /* ForEachSliceAssignment generated from: '<S7>/Out1' */\r\n      rty_Out1[ForEach_itr] = localDW[ForEach_itr].\r\n        CoreSubsys.VariableIntegerDelay_DSTATE[4096U - tmp];\r\n    }\r\n\r\n    /* End of Delay: '<S7>/Variable Integer Delay' */\r\n\r\n    /* Update for Delay: '<S7>/Variable Integer Delay' */\r\n    for (idxDelay = 0; idxDelay < 4095; idxDelay++) {\r\n      localDW[ForEach_itr].CoreSubsys.VariableIntegerDelay_DSTATE[idxDelay] =\r\n        localDW[ForEach_itr].CoreSubsys.VariableIntegerDelay_DSTATE[idxDelay + 1];\r\n    }\r\n\r\n    localDW[ForEach_itr].CoreSubsys.VariableIntegerDelay_DSTATE[4095] =\r\n      rtu_In1[ForEach_itr];\r\n\r\n    /* End of Update for Delay: '<S7>/Variable Integer Delay' */\r\n  }\r\n\r\n  /* End of Outputs for SubSystem: '<S6>/For Each Subsystem' */\r\n}\r\n\r\nreal_T rt_roundd_snf(real_T u)\r\n{\r\n  real_T y;\r\n  if (fabs(u) < 4.503599627370496E+15) {\r\n    if (u >= 0.5) {\r\n      y = floor(u + 0.5);\r\n    } else if (u > -0.5) {\r\n      y = u * 0.0;\r\n    } else {\r\n      y = ceil(u - 0.5);\r\n    }\r\n  } else {\r\n    y = u;\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\n/* Model step function */\r\nvoid IM_TEST_step(void)\r\n{\r\n  /* local block i/o variables */\r\n  real_T rtb_ImpAsg_InsertedFor_Out1_at_;\r\n  real_T rtb_ImpAsg_InsertedFor_Out1_a_i;\r\n  real_T DiscreteTimeIntegrator;\r\n  real_T rtb_MathFunction;\r\n  real_T rtb_RoundingFunction;\r\n  real_T rtb_RoundingFunction_i;\r\n  real_T rtb_Sum4;\r\n  real_T rtb_Sum4_i;\r\n  real32_T rtb_Sum2_mk;\r\n\r\n  /* Outputs for Atomic SubSystem: '<Root>/IM_TEST' */\r\n  /* Math: '<S8>/Math Function' incorporates:\r\n   *  Gain: '<S8>/Gain1'\r\n   *\r\n   * About '<S8>/Math Function':\r\n   *  Operator: reciprocal\r\n   */\r\n  rtb_MathFunction = 1.0 / (500.0 * rtDW.Probe_f[0]);\r\n\r\n  /* Rounding: '<S8>/Rounding Function' */\r\n  rtb_RoundingFunction = rt_roundd_snf(rtb_MathFunction);\r\n\r\n  /* Gain: '<S2>/Gain1' incorporates:\r\n   *  Inport: '<Root>/In1'\r\n   */\r\n  rtb_Sum2_mk = 0.0174532924F * rtU.DEG;\r\n\r\n  /* Sum: '<S1>/Add1' incorporates:\r\n   *  Constant: '<S1>/Constant'\r\n   *  Constant: '<S1>/Constant1'\r\n   *  Inport: '<Root>/W1'\r\n   *  Inport: '<Root>/W2'\r\n   *  Product: '<S1>/Product1'\r\n   *  Product: '<S1>/Product4'\r\n   *  Sum: '<S1>/Sum1'\r\n   *  Sum: '<S1>/Sum2'\r\n   *  Trigonometry: '<S1>/Sin'\r\n   *  Trigonometry: '<S1>/Sin2'\r\n   */\r\n  yraw = arm_sin_f32(rtb_Sum2_mk + 0.785398185F) * rtU.W1 + arm_sin_f32\r\n    (rtb_Sum2_mk + 2.3561945F) * rtU.W2;\r\n\r\n  /* Sum: '<S1>/Add2' incorporates:\r\n   *  Constant: '<S1>/Constant'\r\n   *  Constant: '<S1>/Constant1'\r\n   *  Inport: '<Root>/W1'\r\n   *  Inport: '<Root>/W2'\r\n   *  Product: '<S1>/Product2'\r\n   *  Product: '<S1>/Product3'\r\n   *  Sum: '<S1>/Sum1'\r\n   *  Sum: '<S1>/Sum2'\r\n   *  Trigonometry: '<S1>/Sin1'\r\n   *  Trigonometry: '<S1>/Sin3'\r\n   */\r\n  xraw = arm_cos_f32(rtb_Sum2_mk + 0.785398185F) * rtU.W1 + arm_cos_f32\r\n    (rtb_Sum2_mk + 2.3561945F) * rtU.W2;\r\n\r\n  /* DiscreteIntegrator: '<S8>/Discrete-Time Integrator' */\r\n  if (rtDW.DiscreteTimeIntegrator_SYSTEM_E != 0) {\r\n    /* DiscreteIntegrator: '<S8>/Discrete-Time Integrator' */\r\n    DiscreteTimeIntegrator = rtDW.DiscreteTimeIntegrator_DSTATE;\r\n  } else {\r\n    /* DiscreteIntegrator: '<S8>/Discrete-Time Integrator' incorporates:\r\n     *  MATLAB Function: '<S1>/MATLAB Function'\r\n     */\r\n    DiscreteTimeIntegrator = 5.0E-6 * yraw + rtDW.DiscreteTimeIntegrator_DSTATE;\r\n  }\r\n\r\n  /* End of DiscreteIntegrator: '<S8>/Discrete-Time Integrator' */\r\n\r\n  /* Sum: '<S8>/Sum4' incorporates:\r\n   *  Gain: '<S8>/Gain2'\r\n   *  MATLAB Function: '<S1>/MATLAB Function'\r\n   */\r\n  rtb_Sum4 = 0.0 * yraw + rtb_RoundingFunction;\r\n\r\n  /* Outputs for Iterator SubSystem: '<S8>/For Each Subsystem' */\r\n  ForEachSubsystem(1, &DiscreteTimeIntegrator, &rtb_Sum4,\r\n                   &rtb_ImpAsg_InsertedFor_Out1_at_, rtDW.ForEachSubsystem_l);\r\n\r\n  /* End of Outputs for SubSystem: '<S8>/For Each Subsystem' */\r\n\r\n  /* Switch: '<S8>/Switch' incorporates:\r\n   *  Constant: '<S8>/Constant2'\r\n   *  Gain: '<S8>/Gain'\r\n   *  MATLAB Function: '<S1>/MATLAB Function'\r\n   *  Product: '<S8>/Product1'\r\n   *  RelationalOperator: '<S8>/Relational Operator'\r\n   *  Sum: '<S8>/Sum'\r\n   *  Sum: '<S8>/Sum1'\r\n   *  Sum: '<S8>/Sum2'\r\n   *  Sum: '<S8>/Sum3'\r\n   *  UnitDelay: '<S8>/Unit Delay'\r\n   *  UnitDelay: '<S8>/Unit Delay1'\r\n   */\r\n  if (rtDW.UnitDelay_DSTATE + 1.0 >= rtb_RoundingFunction) {\r\n    rtb_MathFunction = (rtb_MathFunction - rtb_RoundingFunction) * yraw /\r\n      rtb_MathFunction + (DiscreteTimeIntegrator -\r\n                          rtb_ImpAsg_InsertedFor_Out1_at_) * 500.0;\r\n  } else {\r\n    rtb_MathFunction = rtDW.UnitDelay1_DSTATE;\r\n  }\r\n\r\n  /* End of Switch: '<S8>/Switch' */\r\n\r\n  /* DiscreteIntegrator: '<S6>/Discrete-Time Integrator' */\r\n  if (rtDW.DiscreteTimeIntegrator_SYSTEM_g != 0) {\r\n    /* DiscreteIntegrator: '<S6>/Discrete-Time Integrator' */\r\n    rtb_RoundingFunction = rtDW.DiscreteTimeIntegrator_DSTATE_d;\r\n  } else {\r\n    /* DiscreteIntegrator: '<S6>/Discrete-Time Integrator' incorporates:\r\n     *  MATLAB Function: '<S1>/MATLAB Function'\r\n     */\r\n    rtb_RoundingFunction = 5.0E-6 * xraw + rtDW.DiscreteTimeIntegrator_DSTATE_d;\r\n  }\r\n\r\n  /* End of DiscreteIntegrator: '<S6>/Discrete-Time Integrator' */\r\n\r\n  /* Math: '<S6>/Math Function' incorporates:\r\n   *  Gain: '<S6>/Gain1'\r\n   *\r\n   * About '<S6>/Math Function':\r\n   *  Operator: reciprocal\r\n   */\r\n  rtb_Sum4 = 1.0 / (500.0 * rtDW.Probe[0]);\r\n\r\n  /* Rounding: '<S6>/Rounding Function' */\r\n  rtb_RoundingFunction_i = rt_roundd_snf(rtb_Sum4);\r\n\r\n  /* Sum: '<S6>/Sum4' incorporates:\r\n   *  Gain: '<S6>/Gain2'\r\n   *  MATLAB Function: '<S1>/MATLAB Function'\r\n   */\r\n  rtb_Sum4_i = 0.0 * xraw + rtb_RoundingFunction_i;\r\n\r\n  /* Outputs for Iterator SubSystem: '<S6>/For Each Subsystem' */\r\n  ForEachSubsystem(1, &rtb_RoundingFunction, &rtb_Sum4_i,\r\n                   &rtb_ImpAsg_InsertedFor_Out1_a_i, rtDW.ForEachSubsystem_o);\r\n\r\n  /* End of Outputs for SubSystem: '<S6>/For Each Subsystem' */\r\n\r\n  /* Switch: '<S6>/Switch' incorporates:\r\n   *  Constant: '<S6>/Constant2'\r\n   *  Gain: '<S6>/Gain'\r\n   *  MATLAB Function: '<S1>/MATLAB Function'\r\n   *  Product: '<S6>/Product1'\r\n   *  RelationalOperator: '<S6>/Relational Operator'\r\n   *  Sum: '<S6>/Sum'\r\n   *  Sum: '<S6>/Sum1'\r\n   *  Sum: '<S6>/Sum2'\r\n   *  Sum: '<S6>/Sum3'\r\n   *  UnitDelay: '<S6>/Unit Delay'\r\n   *  UnitDelay: '<S6>/Unit Delay1'\r\n   */\r\n  if (rtDW.UnitDelay_DSTATE_i + 1.0 >= rtb_RoundingFunction_i) {\r\n    rtb_Sum4 = (rtb_Sum4 - rtb_RoundingFunction_i) * xraw / rtb_Sum4 +\r\n      (rtb_RoundingFunction - rtb_ImpAsg_InsertedFor_Out1_a_i) * 500.0;\r\n  } else {\r\n    rtb_Sum4 = rtDW.UnitDelay1_DSTATE_p;\r\n  }\r\n\r\n  /* End of Switch: '<S6>/Switch' */\r\n\r\n  /* Update for DiscreteIntegrator: '<S8>/Discrete-Time Integrator' incorporates:\r\n   *  MATLAB Function: '<S1>/MATLAB Function'\r\n   */\r\n  rtDW.DiscreteTimeIntegrator_SYSTEM_E = 0U;\r\n  rtDW.DiscreteTimeIntegrator_DSTATE = 5.0E-6 * yraw + DiscreteTimeIntegrator;\r\n\r\n  /* Update for UnitDelay: '<S8>/Unit Delay' incorporates:\r\n   *  Constant: '<S8>/Constant2'\r\n   *  Sum: '<S8>/Sum3'\r\n   */\r\n  rtDW.UnitDelay_DSTATE++;\r\n\r\n  /* Update for UnitDelay: '<S8>/Unit Delay1' */\r\n  rtDW.UnitDelay1_DSTATE = rtb_MathFunction;\r\n\r\n  /* Update for DiscreteIntegrator: '<S6>/Discrete-Time Integrator' incorporates:\r\n   *  MATLAB Function: '<S1>/MATLAB Function'\r\n   */\r\n  rtDW.DiscreteTimeIntegrator_SYSTEM_g = 0U;\r\n  rtDW.DiscreteTimeIntegrator_DSTATE_d = 5.0E-6 * xraw + rtb_RoundingFunction;\r\n\r\n  /* Update for UnitDelay: '<S6>/Unit Delay' incorporates:\r\n   *  Constant: '<S6>/Constant2'\r\n   *  Sum: '<S6>/Sum3'\r\n   */\r\n  rtDW.UnitDelay_DSTATE_i++;\r\n\r\n  /* Update for UnitDelay: '<S6>/Unit Delay1' */\r\n  rtDW.UnitDelay1_DSTATE_p = rtb_Sum4;\r\n\r\n  /* End of Outputs for SubSystem: '<Root>/IM_TEST' */\r\n\r\n  /* Outport: '<Root>/YOUT' */\r\n  rtY.YOUT = rtb_MathFunction;\r\n\r\n  /* Outport: '<Root>/XOUT' */\r\n  rtY.XOUT = rtb_Sum4;\r\n\r\n  /* Outputs for Atomic SubSystem: '<Root>/IM_TEST' */\r\n  /* DeadZone: '<S1>/Dead Zone2' incorporates:\r\n   *  Inport: '<Root>/X_ACCIN'\r\n   */\r\n  if (rtU.X_ACCIN > 0.1) {\r\n    /* Outport: '<Root>/X_ACCOUT' */\r\n    rtY.X_ACCOUT = rtU.X_ACCIN - 0.1;\r\n  } else if (rtU.X_ACCIN >= -0.1) {\r\n    /* Outport: '<Root>/X_ACCOUT' */\r\n    rtY.X_ACCOUT = 0.0;\r\n  } else {\r\n    /* Outport: '<Root>/X_ACCOUT' */\r\n    rtY.X_ACCOUT = rtU.X_ACCIN - -0.1;\r\n  }\r\n\r\n  /* End of DeadZone: '<S1>/Dead Zone2' */\r\n\r\n  /* DeadZone: '<S1>/Dead Zone3' incorporates:\r\n   *  Inport: '<Root>/Y_ACCIN'\r\n   */\r\n  if (rtU.Y_ACCIN > 0.1) {\r\n    /* Outport: '<Root>/Y_ACCOUT' */\r\n    rtY.Y_ACCOUT = rtU.Y_ACCIN - 0.1;\r\n  } else if (rtU.Y_ACCIN >= -0.1) {\r\n    /* Outport: '<Root>/Y_ACCOUT' */\r\n    rtY.Y_ACCOUT = 0.0;\r\n  } else {\r\n    /* Outport: '<Root>/Y_ACCOUT' */\r\n    rtY.Y_ACCOUT = rtU.Y_ACCIN - -0.1;\r\n  }\r\n\r\n  /* End of DeadZone: '<S1>/Dead Zone3' */\r\n  /* End of Outputs for SubSystem: '<Root>/IM_TEST' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid IM_TEST_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize non-finites */\r\n  rt_InitInfAndNaN(sizeof(real_T));\r\n\r\n  /* SystemInitialize for Atomic SubSystem: '<Root>/IM_TEST' */\r\n  /* Start for Probe: '<S6>/Probe' */\r\n  rtDW.Probe[0] = 1.0E-5;\r\n  rtDW.Probe[1] = 0.0;\r\n\r\n  /* Start for Probe: '<S8>/Probe' */\r\n  rtDW.Probe_f[0] = 1.0E-5;\r\n  rtDW.Probe_f[1] = 0.0;\r\n\r\n  /* End of SystemInitialize for SubSystem: '<Root>/IM_TEST' */\r\n\r\n  /* Enable for Atomic SubSystem: '<Root>/IM_TEST' */\r\n  /* Enable for DiscreteIntegrator: '<S8>/Discrete-Time Integrator' */\r\n  rtDW.DiscreteTimeIntegrator_SYSTEM_E = 1U;\r\n\r\n  /* Enable for DiscreteIntegrator: '<S6>/Discrete-Time Integrator' */\r\n  rtDW.DiscreteTimeIntegrator_SYSTEM_g = 1U;\r\n\r\n  /* End of Enable for SubSystem: '<Root>/IM_TEST' */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"IM_TEST.h","type":"header","group":"model","path":"F:\\THE_LIBRARY\\CODE_BASE\\ROBOSERVO\\Sleipnier_IMU\\MAIN\\Prototype_04_407_VE_2_0_24318\\Chassis-positioning\\Version2\\IM_TEST_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: IM_TEST.h\r\n *\r\n * Code generated for Simulink model 'IM_TEST'.\r\n *\r\n * Model version                  : 1.31\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Sun Mar 31 18:34:26 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_IM_TEST_h_\r\n#define RTW_HEADER_IM_TEST_h_\r\n#ifndef IM_TEST_COMMON_INCLUDES_\r\n#define IM_TEST_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* IM_TEST_COMMON_INCLUDES_ */\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n/* Block signals and states (default storage) for system '<S6>/For Each Subsystem' */\r\ntypedef struct {\r\n  real_T VariableIntegerDelay_DSTATE[4096];/* '<S7>/Variable Integer Delay' */\r\n} DW_CoreSubsys;\r\n\r\n/* Block signals and states (default storage) for system '<S6>/For Each Subsystem' */\r\ntypedef struct {\r\n  DW_CoreSubsys CoreSubsys;            /* '<S6>/For Each Subsystem' */\r\n} DW_ForEachSubsystem;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  DW_ForEachSubsystem ForEachSubsystem_l[1];/* '<S8>/For Each Subsystem' */\r\n  DW_ForEachSubsystem ForEachSubsystem_o[1];/* '<S6>/For Each Subsystem' */\r\n  real_T Probe[2];                     /* '<S6>/Probe' */\r\n  real_T Probe_f[2];                   /* '<S8>/Probe' */\r\n  real_T DiscreteTimeIntegrator_DSTATE;/* '<S8>/Discrete-Time Integrator' */\r\n  real_T UnitDelay_DSTATE;             /* '<S8>/Unit Delay' */\r\n  real_T UnitDelay1_DSTATE;            /* '<S8>/Unit Delay1' */\r\n  real_T DiscreteTimeIntegrator_DSTATE_d;/* '<S6>/Discrete-Time Integrator' */\r\n  real_T UnitDelay_DSTATE_i;           /* '<S6>/Unit Delay' */\r\n  real_T UnitDelay1_DSTATE_p;          /* '<S6>/Unit Delay1' */\r\n  uint8_T DiscreteTimeIntegrator_SYSTEM_E;/* '<S8>/Discrete-Time Integrator' */\r\n  uint8_T DiscreteTimeIntegrator_SYSTEM_g;/* '<S6>/Discrete-Time Integrator' */\r\n} DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real32_T W1;                         /* '<Root>/W1' */\r\n  real32_T W2;                         /* '<Root>/W2' */\r\n  real32_T DEG;                        /* '<Root>/In1' */\r\n  real_T X_ACCIN;                      /* '<Root>/X_ACCIN' */\r\n  real_T Y_ACCIN;                      /* '<Root>/Y_ACCIN' */\r\n} ExtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T YOUT;                         /* '<Root>/YOUT' */\r\n  real_T XOUT;                         /* '<Root>/XOUT' */\r\n  real_T X_ACCOUT;                     /* '<Root>/X_ACCOUT' */\r\n  real_T Y_ACCOUT;                     /* '<Root>/Y_ACCOUT' */\r\n} ExtY;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/*\r\n * Exported Global Signals\r\n *\r\n * Note: Exported global signals are block signals with an exported global\r\n * storage class designation.  Code generation will declare the memory for\r\n * these signals and export their symbols.\r\n *\r\n */\r\nextern real_T yraw;                    /* '<S1>/Add1' */\r\nextern real_T xraw;                    /* '<S1>/Add2' */\r\n\r\n/* Model entry point functions */\r\nextern void IM_TEST_initialize(void);\r\nextern void IM_TEST_step(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('MAIN/IM_TEST')    - opens subsystem MAIN/IM_TEST\r\n * hilite_system('MAIN/IM_TEST/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'MAIN'\r\n * '<S1>'   : 'MAIN/IM_TEST'\r\n * '<S2>'   : 'MAIN/IM_TEST/Degrees to Radians'\r\n * '<S3>'   : 'MAIN/IM_TEST/MATLAB Function'\r\n * '<S4>'   : 'MAIN/IM_TEST/Moving Average'\r\n * '<S5>'   : 'MAIN/IM_TEST/Moving Average1'\r\n * '<S6>'   : 'MAIN/IM_TEST/Moving Average/Discrete'\r\n * '<S7>'   : 'MAIN/IM_TEST/Moving Average/Discrete/For Each Subsystem'\r\n * '<S8>'   : 'MAIN/IM_TEST/Moving Average1/Discrete'\r\n * '<S9>'   : 'MAIN/IM_TEST/Moving Average1/Discrete/For Each Subsystem'\r\n */\r\n#endif                                 /* RTW_HEADER_IM_TEST_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"F:\\THE_LIBRARY\\CODE_BASE\\ROBOSERVO\\Sleipnier_IMU\\MAIN\\Prototype_04_407_VE_2_0_24318\\Chassis-positioning\\Version2\\IM_TEST_ert_rtw","tag":"","groupDisplay":"实用工具文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'IM_TEST'.\r\n *\r\n * Model version                  : 1.31\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Sun Mar 31 18:34:26 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"mw_cmsis.h","type":"header","group":"other","path":"F:\\THE_LIBRARY\\CODE_BASE\\ROBOSERVO\\Sleipnier_IMU\\MAIN\\Prototype_04_407_VE_2_0_24318\\Chassis-positioning\\Version2\\IM_TEST_ert_rtw","tag":"","groupDisplay":"其他文件","code":"/* Copyright 2015-2021 The MathWorks, Inc. */\n\n/****************************************************\n*                                                   *   \n* Wrapper functions for CMSIS functions             *\n*                                                   *  \n****************************************************/\n\n#ifndef MW_CMSIS_H\n#define MW_CMSIS_H\n\n#include \"arm_math.h\"\n#include \"rtwtypes.h\"\n\n#define mw_arm_abs_f32(pSrc, pDst, blockSize) arm_abs_f32((float32_t *)pSrc, (float32_t *)pDst, blockSize)\n#define mw_arm_abs_q7(pSrc, pDst, blockSize) arm_abs_q7((q7_t *)pSrc, (q7_t *)pDst, blockSize) \n#define mw_arm_abs_q15(pSrc, pDst, blockSize) arm_abs_q15((q15_t *)pSrc, (q15_t *)pDst, blockSize) \n#define mw_arm_abs_q31(pSrc, pDst, blockSize) arm_abs_q31((q31_t *)pSrc, (q31_t *)pDst, blockSize) \n\n#define mw_arm_sqrt_q15(in, pOut) arm_sqrt_q15((q15_t)in,(q15_t *)pOut)\n#define mw_arm_sqrt_q31(in, pOut) arm_sqrt_q31((q31_t)in,(q31_t *)pOut)\n#define mw_arm_sqrt_f32(in, pOut) arm_sqrt_f32((float32_t)in,(float32_t *)pOut)\n\n#define mw_arm_float_to_q31(pSrc, pDst, blockSize) arm_float_to_q31((float32_t *)pSrc, (q31_t *)pDst, blockSize)\n#define mw_arm_float_to_q15(pSrc, pDst, blockSize) arm_float_to_q15((float32_t *)pSrc, (q15_t *)pDst, blockSize)\n#define mw_arm_float_to_q7(pSrc, pDst, blockSize) arm_float_to_q7((float32_t *)pSrc, (q7_t *)pDst, blockSize)\n\n#define mw_arm_q15_to_float(pSrc, pDst, blockSize) arm_q15_to_float((q15_t *)pSrc, (float32_t *)pDst, blockSize)\n#define mw_arm_q15_to_q31(pSrc, pDst, blockSize) arm_q15_to_q31((q15_t *)pSrc, (q31_t *)pDst, blockSize)\n#define mw_arm_q15_to_q7(pSrc, pDst, blockSize) arm_q15_to_q7((q15_t *)pSrc, (q7_t *)pDst, blockSize)\n\n#define mw_arm_q31_to_float(pSrc, pDst, blockSize) arm_q31_to_float((q31_t *)pSrc, (float32_t *)pDst, blockSize)\n#define mw_arm_q31_to_q15(pSrc, pDst, blockSize) arm_q31_to_q15((q31_t *)pSrc, (q15_t *)pDst, blockSize)\n#define mw_arm_q31_to_q7(pSrc, pDst, blockSize) arm_q31_to_q7((q31_t *)pSrc, (q7_t *)pDst, blockSize)\n\n#define mw_arm_q7_to_float(pSrc, pDst, blockSize) arm_q7_to_float((q7_t *)pSrc, (float32_t *)pDst, blockSize)\n#define mw_arm_q7_to_q31(pSrc, pDst, blockSize) arm_q7_to_q31((q7_t *)pSrc, (q31_t *)pDst, blockSize)\n#define mw_arm_q7_to_q15(pSrc, pDst, blockSize) arm_q7_to_q15((q7_t *)pSrc, (q15_t *)pDst, blockSize)\n\n#define mw_arm_add_f32(pSrcA, pSrcB, pDst, blockSize) arm_add_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\n#define mw_arm_add_q31(pSrcA, pSrcB, pDst, blockSize) arm_add_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\n#define mw_arm_add_q15(pSrcA, pSrcB, pDst, blockSize) arm_add_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\n#define mw_arm_add_q7(pSrcA, pSrcB, pDst, blockSize)  arm_add_q7((q7_t *)pSrcA, (q7_t *)pSrcB, (q7_t *)pDst, blockSize)\n\n#define mw_arm_sub_f32(pSrcA, pSrcB, pDst, blockSize) arm_sub_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\n#define mw_arm_sub_q31(pSrcA, pSrcB, pDst, blockSize) arm_sub_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\n#define mw_arm_sub_q15(pSrcA, pSrcB, pDst, blockSize) arm_sub_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\n#define mw_arm_sub_q7(pSrcA, pSrcB, pDst, blockSize)  arm_sub_q7((q7_t *)pSrcA, (q7_t *)pSrcB, (q7_t *)pDst, blockSize)\n\n#define mw_arm_mult_f32(pSrcA, pSrcB, pDst, blockSize) arm_mult_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\n#define mw_arm_mult_q31(pSrcA, pSrcB, pDst, blockSize) arm_mult_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\n#define mw_arm_mult_q15(pSrcA, pSrcB, pDst, blockSize) arm_mult_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\n#define mw_arm_mult_q7(pSrcA, pSrcB, pDst, blockSize)  arm_mult_q7((q7_t *)pSrcA, (q7_t *)pSrcB, (q7_t *)pDst, blockSize)\n\n#define mw_arm_cmplx_conj_f32(pSrc, pDst, numSamples) arm_cmplx_conj_f32((float32_t *)pSrc, (float32_t *)pDst, numSamples)\n#define mw_arm_cmplx_conj_q31(pSrc, pDst, numSamples) arm_cmplx_conj_q31((q31_t *)pSrc, (q31_t *)pDst, numSamples)\n#define mw_arm_cmplx_conj_q15(pSrc, pDst, numSamples) arm_cmplx_conj_q15((q15_t *)pSrc, (q15_t *)pDst, numSamples)\n\n#define mw_arm_cmplx_mult_cmplx_f32(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_cmplx_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\n#define mw_arm_cmplx_mult_cmplx_q31(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_cmplx_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\n#define mw_arm_cmplx_mult_cmplx_q15(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_cmplx_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\n\n#define mw_arm_cmplx_mult_real_f32(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_real_f32((float32_t *)pSrcA, (float32_t *)pSrcB, (float32_t *)pDst, blockSize)\n#define mw_arm_cmplx_mult_real_q31(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_real_q31((q31_t *)pSrcA, (q31_t *)pSrcB, (q31_t *)pDst, blockSize)\n#define mw_arm_cmplx_mult_real_q15(pSrcA, pSrcB, pDst, blockSize) arm_cmplx_mult_real_q15((q15_t *)pSrcA, (q15_t *)pSrcB, (q15_t *)pDst, blockSize)\n\n#define mw_arm_rshift_q15(pSrc, shiftBits, pDst, blockSize) arm_shift_q15 ((q15_t *)pSrc, -(shiftBits),(q15_t *)pDst, blockSize)\n#define mw_arm_rshift_q31(pSrc, shiftBits, pDst, blockSize) arm_shift_q31 ((q31_t *)pSrc, -(shiftBits), (q31_t *)pDst, blockSize)\n#define mw_arm_rshift_q7(pSrc, shiftBits, pDst, blockSize) arm_shift_q7 ((q7_t *)pSrc,  -(shiftBits), (q7_t *)pDst, blockSize)\n\n#define mw_arm_shift_q15(pSrc, shiftBits, pDst, blockSize) arm_shift_q15 ((q15_t *)pSrc, shiftBits,(q15_t *)pDst, blockSize)\n#define mw_arm_shift_q31(pSrc, shiftBits, pDst, blockSize) arm_shift_q31 ((q31_t *)pSrc, shiftBits, (q31_t *)pDst, blockSize)\n#define mw_arm_shift_q7(pSrc, shiftBits, pDst, blockSize) arm_shift_q7 ((q7_t *)pSrc, shiftBits, (q7_t *)pDst, blockSize)\n\n#endif\n"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};